---
import Layout from '../layouts/Layout.astro';
import PokemonCard from '../components/PokemonCard.astro';
import { fetchPokemon, fetchPokemonByType, getTypeColor } from '../utils/api';
import type { Pokemon } from '../utils/api';

// Obtener par√°metros de la URL
const url = Astro.url;
const searchName = url.searchParams.get('name');
const searchType = url.searchParams.get('type');

// Lista de tipos disponibles
const pokemonTypes = [
  'normal', 'fire', 'water', 'electric', 'grass', 'ice',
  'fighting', 'poison', 'ground', 'flying', 'psychic', 'bug',
  'rock', 'ghost', 'dragon', 'dark', 'steel', 'fairy'
];

// Variables para los resultados
let pokemonList: Pokemon[] = [];
let error = '';
let resultsTitle = '';
let resultsCount = '';

// B√∫squeda por nombre
if (searchName) {
  try {
    const pokemon = await fetchPokemon(searchName);
    pokemonList = [pokemon];
    resultsTitle = 'Resultado de b√∫squeda por nombre';
    resultsCount = `Encontrado: ${pokemon.name}`;
  } catch (e) {
    error = `No se pudo encontrar el Pok√©mon "${searchName}"`;
  }
}

// B√∫squeda por tipo
if (searchType) {
  try {
    pokemonList = await fetchPokemonByType(searchType);
    resultsTitle = `Pok√©mon de tipo "${searchType}"`;
    resultsCount = `Encontrados ${pokemonList.length} Pok√©mon del tipo "${searchType}"`;
  } catch (e) {
    error = `Error al buscar Pok√©mon del tipo "${searchType}"`;
  }
}
---

<Layout title="Buscar Pok√©mon - PokeDex">
  <div class="container">
    <div class="back-button">
      <a href="/">‚Üê Volver al Men√∫</a>
    </div>
    
    <h1>üîç Buscar Pok√©mon</h1>
    
    <!-- B√∫squeda por nombre -->
    <div class="search-section">
      <h2>Buscar por Nombre</h2>
      <div class="search-container">
        <input 
          type="text" 
          id="pokemon-name-input"
          placeholder="Escribe el nombre del Pok√©mon..." 
          class="search-input"
        />
        <button id="name-search-btn" class="search-btn">üîç</button>
      </div>
    </div>

    <!-- B√∫squeda por tipo -->
    <div class="search-section">
      <h2>Buscar por Tipo</h2>
      <div class="type-buttons">
        {pokemonTypes.map((type) => (
          <button 
            class="type-btn" 
            data-type={type}
            style={`background-color: ${getTypeColor(type)}`}
          >
            {type}
          </button>
        ))}
      </div>
    </div>

    <!-- Loading -->
    <div id="loading-container" class="loading-container hidden">
      <div class="pokeball">
        <div class="pokeball-top"></div>
        <div class="pokeball-middle"></div>
        <div class="pokeball-bottom"></div>
      </div>
      <p>Cargando Pok√©mon...</p>
    </div>

    <!-- Error -->
    <div id="error-container" class="error-message hidden">
    </div>
    
    <!-- Resultados desde server-side (si existen par√°metros en URL) -->
    {error && (
      <div class="error-message">
        {error}
      </div>
    )}
    
    {pokemonList.length > 0 && (
      <div class="results-section">
        <h2>{resultsTitle}</h2>
        <p class="results-count">{resultsCount}</p>
        <div class="pokemon-grid">
          {pokemonList.map((pokemon) => (
            <PokemonCard pokemon={pokemon} />
          ))}
        </div>
      </div>
    )}
    
    <!-- Resultados din√°micos (para b√∫squedas por JS) -->
    <div id="results-container" class="results-section hidden">
      <h2 id="results-title">Resultados de b√∫squeda</h2>
      <p id="results-count" class="results-count"></p>
      <div id="pokemon-grid" class="pokemon-grid">
      </div>
    </div>
  </div>
</Layout>

<script>
  // Tipos de colores para los Pok√©mon
  const typeColors = {
    normal: '#A8A878',
    fire: '#F08030',
    water: '#6890F0',
    electric: '#F8D030',
    grass: '#78C850',
    ice: '#98D8D8',
    fighting: '#C03028',
    poison: '#A040A0',
    ground: '#E0C068',
    flying: '#A890F0',
    psychic: '#F85888',
    bug: '#A8B820',
    rock: '#B8A038',
    ghost: '#705898',
    dragon: '#7038F8',
    dark: '#705848',
    steel: '#B8B8D0',
    fairy: '#EE99AC',
  };

  // Elementos del DOM
  const nameInput = document.getElementById('pokemon-name-input') as HTMLInputElement;
  const nameSearchBtn = document.getElementById('name-search-btn') as HTMLButtonElement;
  const typeButtons = document.querySelectorAll('.type-btn') as NodeListOf<HTMLButtonElement>;
  const loadingContainer = document.getElementById('loading-container') as HTMLDivElement;
  const errorContainer = document.getElementById('error-container') as HTMLDivElement;
  const resultsContainer = document.getElementById('results-container') as HTMLDivElement;
  const resultsTitle = document.getElementById('results-title') as HTMLHeadingElement;
  const resultsCount = document.getElementById('results-count') as HTMLParagraphElement;
  const pokemonGrid = document.getElementById('pokemon-grid') as HTMLDivElement;

  let activeTypeBtn: HTMLButtonElement | null = null;

  // Funci√≥n para mostrar/ocultar elementos
  function showElement(element: HTMLElement) {
    element.classList.remove('hidden');
  }

  function hideElement(element: HTMLElement) {
    element.classList.add('hidden');
  }

  // Funci√≥n para limpiar resultados
  function clearResults() {
    hideElement(errorContainer);
    hideElement(resultsContainer);
    pokemonGrid.innerHTML = '';
  }

  // Funci√≥n para mostrar loading
  function showLoading() {
    clearResults();
    showElement(loadingContainer);
  }

  // Funci√≥n para ocultar loading
  function hideLoading() {
    hideElement(loadingContainer);
  }

  // Funci√≥n para mostrar error
  function showError(message: string) {
    hideLoading();
    errorContainer.textContent = message;
    showElement(errorContainer);
  }

  // Funci√≥n para obtener el color del tipo
  function getTypeColor(type: string): string {
    return typeColors[type as keyof typeof typeColors] || '#68A090';
  }

  // Funci√≥n para crear una tarjeta de Pok√©mon HTML usando el mismo estilo que PokemonCard
  function createPokemonCardHTML(pokemon: any): string {
    const imageUrl = pokemon.sprites.other?.['dream_world']?.front_default || pokemon.sprites.front_default;
    
    return `
      <div class="pokemon-card">
        <div class="pokemon-image">
          <img src="${imageUrl}" alt="${pokemon.name}" loading="lazy" />
        </div>
        <div class="pokemon-info">
          <h3 class="pokemon-name">${pokemon.name}</h3>
          <p class="pokemon-id">#${pokemon.id.toString().padStart(3, '0')}</p>
          <div class="pokemon-types">
            ${pokemon.types.map((type: any) => 
              `<span class="type-badge" style="background-color: ${getTypeColor(type.type.name)}">${type.type.name}</span>`
            ).join('')}
          </div>
          <div class="pokemon-stats">
            <p><strong>Altura:</strong> ${(pokemon.height / 10).toFixed(1)}m</p>
            <p><strong>Peso:</strong> ${(pokemon.weight / 10).toFixed(1)}kg</p>
          </div>
        </div>
        <a href="/pokemon/${pokemon.id}" class="pokemon-link">Ver detalles</a>
      </div>
    `;
  }

  // Funci√≥n para buscar Pok√©mon por nombre
  async function searchByName(name: string) {
    showLoading();
    try {
      const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${name.toLowerCase()}`);
      if (!response.ok) {
        throw new Error('Pok√©mon no encontrado');
      }
      const pokemon = await response.json();
      
      hideLoading();
      resultsTitle.textContent = 'Resultado de b√∫squeda por nombre';
      resultsCount.textContent = `Encontrado: ${pokemon.name}`;
      pokemonGrid.innerHTML = createPokemonCardHTML(pokemon);
      showElement(resultsContainer);
      
    } catch (error) {
      showError(`No se pudo encontrar el Pok√©mon "${name}"`);
    }
  }

  // Funci√≥n para buscar Pok√©mon por tipo
  async function searchByType(type: string) {
    showLoading();
    try {
      const response = await fetch(`https://pokeapi.co/api/v2/type/${type.toLowerCase()}`);
      if (!response.ok) {
        throw new Error('Tipo no encontrado');
      }
      
      const typeData = await response.json();
      
      // Limitar a los primeros 12 Pok√©mon para mejor rendimiento
      const pokemonList = typeData.pokemon.slice(0, 12);
      
      const pokemonPromises = pokemonList.map(async (pokemonEntry: any) => {
        const id = pokemonEntry.pokemon.url.split('/').slice(-2, -1)[0];
        const pokemonResponse = await fetch(`https://pokeapi.co/api/v2/pokemon/${id}`);
        return pokemonResponse.json();
      });
      
      const pokemons = await Promise.all(pokemonPromises);
      
      hideLoading();
      resultsTitle.textContent = `Pok√©mon de tipo "${type}"`;
      resultsCount.textContent = `Encontrados ${pokemons.length} Pok√©mon del tipo "${type}"`;
      pokemonGrid.innerHTML = pokemons.map(pokemon => createPokemonCardHTML(pokemon)).join('');
      showElement(resultsContainer);
      
    } catch (error) {
      showError(`Error al buscar Pok√©mon del tipo "${type}"`);
    }
  }

  // Event listeners
  nameSearchBtn.addEventListener('click', () => {
    const name = nameInput.value.trim();
    if (name) {
      searchByName(name);
    }
  });

  nameInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      const name = nameInput.value.trim();
      if (name) {
        searchByName(name);
      }
    }
  });

  typeButtons.forEach(btn => {
    btn.addEventListener('click', () => {
      const type = btn.getAttribute('data-type');
      if (type) {
        // Limpiar bot√≥n activo anterior
        if (activeTypeBtn) {
          activeTypeBtn.classList.remove('active');
        }
        
        // Marcar bot√≥n actual como activo
        btn.classList.add('active');
        activeTypeBtn = btn;
        
        searchByType(type);
      }
    });
  });
</script>

<style>
  .back-button {
    margin-bottom: 20px;
  }

  .back-button a {
    display: inline-flex;
    align-items: center;
    background: rgba(255, 255, 255, 0.9);
    color: #333;
    padding: 12px 20px;
    border-radius: 25px;
    text-decoration: none;
    font-weight: bold;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  }

  .back-button a:hover {
    background: #ffcc02;
    transform: translateY(-2px);
  }

  .search-section {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 20px;
    padding: 25px;
    margin-bottom: 25px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .search-section h2 {
    text-align: center;
    color: #333;
    margin-bottom: 20px;
    font-size: 1.5rem;
  }

  .search-container {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 15px;
    margin-bottom: 0;
  }

  .search-input {
    padding: 15px 20px;
    border-radius: 25px;
    border: 2px solid #e0e0e0;
    outline: none;
    font-size: 1rem;
    transition: all 0.3s ease;
    min-width: 300px;
    background: white;
  }

  .search-input:focus {
    border-color: #667eea;
    box-shadow: 0 0 20px rgba(102, 126, 234, 0.3);
  }

  .search-btn {
    padding: 15px 25px;
    background: linear-gradient(45deg, #667eea, #764ba2);
    color: white;
    border: none;
    border-radius: 25px;
    font-size: 1.2rem;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }

  .search-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
  }

  .type-buttons {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: 15px;
    margin-top: 20px;
  }

  .type-btn {
    padding: 12px 20px;
    border: none;
    border-radius: 20px;
    color: white;
    font-weight: bold;
    text-align: center;
    text-transform: capitalize;
    text-decoration: none;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    cursor: pointer;
    display: block;
  }

  .type-btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
  }

  .type-btn.active {
    transform: scale(1.1);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
    border: 3px solid #fff;
  }

  .results-section {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 20px;
    padding: 30px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    margin-bottom: 30px;
  }

  .results-section h2 {
    text-align: center;
    color: #333;
    margin-bottom: 10px;
    font-size: 1.8rem;
  }

  .results-count {
    text-align: center;
    color: #666;
    font-size: 1rem;
    margin-bottom: 25px;
    font-style: italic;
  }

  .error-message {
    background: rgba(244, 67, 54, 0.9);
    color: white;
    padding: 20px;
    border-radius: 15px;
    margin: 20px 0;
    text-align: center;
    font-weight: bold;
    font-size: 1.1rem;
  }

  /* Estilos para las tarjetas de Pok√©mon generadas por JavaScript */
  .pokemon-card {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 10px;
    padding: 12px;
    text-align: center;
    box-shadow: 0 3px 12px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    position: relative;
    overflow: hidden;
    min-height: 280px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .pokemon-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .pokemon-card .pokemon-image {
    margin-bottom: 10px;
    position: relative;
    height: 170px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .pokemon-card .pokemon-image img {
    width: 145px;
    height: 157px;
    object-fit: contain;
    transition: transform 0.3s ease;
  }

  .pokemon-card:hover .pokemon-image img {
    transform: scale(1.1);
  }

  .pokemon-card .pokemon-name {
    font-size: 0.8rem;
    font-weight: bold;
    margin: 4px 0 2px 0;
    color: #333;
    text-transform: capitalize;
  }

  .pokemon-card .pokemon-id {
    font-size: 0.65rem;
    color: #666;
    margin-bottom: 4px;
    font-weight: bold;
  }

  .pokemon-card .pokemon-types {
    display: flex;
    justify-content: center;
    gap: 3px;
    margin-bottom: 4px;
    flex-wrap: wrap;
  }

  .pokemon-card .type-badge {
    padding: 1px 4px;
    border-radius: 6px;
    color: white;
    font-size: 0.5rem;
    font-weight: bold;
    text-transform: capitalize;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
  }

  .pokemon-card .pokemon-stats {
    font-size: 0.55rem;
    color: #555;
    margin-bottom: 6px;
  }

  .pokemon-card .pokemon-stats p {
    margin: 0.5px 0;
  }

  .pokemon-card .pokemon-link {
    display: inline-block;
    background: linear-gradient(45deg, #667eea, #764ba2);
    color: white;
    padding: 3px 8px;
    border-radius: 8px;
    text-decoration: none;
    font-weight: bold;
    font-size: 0.55rem;
    transition: transform 0.2s ease;
    position: relative;
    overflow: hidden;
  }

  .pokemon-card .pokemon-link:hover {
    transform: scale(1.05);
  }

  .pokemon-card .pokemon-link:before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    transition: left 0.5s;
  }

  .pokemon-card .pokemon-link:hover:before {
    left: 100%;
  }

  /* Responsive para tarjetas de Pok√©mon */
  @media (max-width: 768px) {
    .pokemon-card {
      padding: 10px;
      min-height: 240px;
    }

    .pokemon-card .pokemon-image {
      height: 120px;
    }

    .pokemon-card .pokemon-image img {
      width: 100px;
      height: 110px;
    }

    .pokemon-card .pokemon-name {
      font-size: 0.7rem;
    }

    .pokemon-card .pokemon-id {
      font-size: 0.55rem;
    }

    .pokemon-card .pokemon-stats {
      font-size: 0.5rem;
    }

    .pokemon-card .type-badge {
      font-size: 0.45rem;
      padding: 1px 3px;
    }

    .pokemon-card .pokemon-link {
      font-size: 0.5rem;
      padding: 2px 6px;
    }
  }

  @media (max-width: 480px) {
    .pokemon-card {
      padding: 8px;
      min-height: 200px;
    }

    .pokemon-card .pokemon-image {
      height: 90px;
    }

    .pokemon-card .pokemon-image img {
      width: 75px;
      height: 85px;
    }

    .pokemon-card .pokemon-name {
      font-size: 0.65rem;
    }

    .pokemon-card .pokemon-id {
      font-size: 0.5rem;
    }

    .pokemon-card .pokemon-stats {
      font-size: 0.45rem;
    }
  }
</style>
